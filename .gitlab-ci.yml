stages:
  - build                # Build binaries
  - sanitation           # Execute some sanitation tests on the code
  - doc                  # Generates the documentation
  - packaging            # Packages the project

#===========================================================================
# TEMPLATES
#===========================================================================
.build_template: &build_definition
  stage: build
  before_script:
    - cmake -E remove_directory build
    - cmake -E make_directory build
  script:
    - cmake -E chdir build cmake -DBUILD_SHARED_LIBS=ON -DBUILD_TEST=ON -DCMAKE_BUILD_TYPE=Release ..
    - cmake --build build
  allow_failure: false

.package_template: &package_definition
  stage: packaging
  before_script:
    - cmake -E remove_directory build
    - cmake -E make_directory build
    - cmake -E rename build-doc/generated_doc build/generated_doc
  script:
    - cmake -E chdir build cmake -DCMAKE_BUILD_SHARED_LIBS=ON -DBUILD_DOC=ON -DBUILD_PACKAGE=ON -DCMAKE_BUILD_TYPE=Release ..
    - cmake -E chdir build cmake --build . --target package
  dependencies:
    - generate API documentation
  only:
    - develop
    - master

.sanitation:no warnings: &no_warns_definition
  stage: sanitation
  before_script:
    - cmake -E remove_directory build
    - cmake -E make_directory build
  script:
    - cmake -E chdir build cmake -DCMAKE_C_COMPILER="$C_COMPILER" -DCMAKE_CXX_COMPILER="$CXX_COMPILER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$WARNING_AS_ERROR_FLAGS" ..
    - cmake --build build
  dependencies: []

#===========================================================================
# BUILD 
#===========================================================================
osx:
  <<: *build_definition
  artifacts:
    paths:
      - build/libmapgen.*dylib*
      - build/test/biometexgen
      - build/test/noisetexgen
    expire_in: 1 week
  tags:
    - osx
linux:gcc:
  <<: *build_definition
  script:
    - cmake -E chdir build cmake -DBUILD_SHARED_LIBS=ON -DBUILD_TEST=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ ..
    - cmake --build build
  artifacts:
    paths:
      - build/libmapgen.*so*
      - build/test/biometexgen
      - build/test/noisetexgen
    expire_in: 1 week
  tags:
    - linux
linux:clang:
  <<: *build_definition
  script:
    - cmake -E chdir build cmake -DBUILD_SHARED_LIBS=ON -DBUILD_TEST=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
    - cmake --build build
  artifacts:
    paths:
      - build/libmapgen.*so*
      - build/test/biometexgen
      - build/test/noisetexgen
    expire_in: 1 week
  tags:
    - linux
windows:
  <<: *build_definition
  script:
      - cmake -E chdir build cmake -DBUILD_TEST=ON -DCMAKE_BUILD_TYPE=Release ..
      - cmake --build build
  artifacts:
    paths:
      - build\Debug\mapgen.lib
      - build\Debug\mapgen.pdb
      - build\test\Debug\biometexgen.exe
      - build\test\Debug\noisetexgen.exe
    expire_in: 1 week
  tags:
    - windows

#===========================================================================
# SANITATION
#===========================================================================
# Failure is allowed on branches that aren't master
soft no warnings:linux:gcc:
  variables:
    WARNING_AS_ERROR_FLAGS: "-Werror -Wall -Wextra"
    CXX_COMPILER: "g++"
    C_COMPILER:   "gcc"
  <<: *no_warns_definition
  allow_failure: true
  except:
    - master
    - develop
  tags:
    - linux
    - gcc

soft no warnings:linux:clang:
  variables:
    WARNING_AS_ERROR_FLAGS: "-Werror -Wall -Wextra"
    CXX_COMPILER: "clang++"
    C_COMPILER:   "clang"
  <<: *no_warns_definition
  allow_failure: true
  except:
    - master
    - develop
  tags:
    - linux
    - clang

# Failure is not allowed on master
no warnings:linux:gcc:
  variables:
    WARNING_AS_ERROR_FLAGS: "-Werror -Wall -Wextra"
    CXX_COMPILER: "g++"
    C_COMPILER:   "gcc"
  <<: *no_warns_definition
  only:
    - master
    - develop
  tags:
    - linux
    - gcc

no warnings:linux:clang:
  variables:
    WARNING_AS_ERROR_FLAGS: "-Werror -Wall -Wextra"
    CXX_COMPILER: "clang++"
    C_COMPILER:   "clang"
  <<: *no_warns_definition
  only:
    - master
    - develop
  tags:
    - linux
    - clang

#===========================================================================
# DOCUMENTATION
#===========================================================================
generate API documentation:
  stage: doc
  before_script:
    - cmake -E remove_directory build-doc
    - cmake -E make_directory build-doc
  script:
    - cmake -E chdir build-doc cmake -DBUILD_DOC=ON ..
    - cmake --build build-doc --target doc
  artifacts:
    paths:
      - build-doc/generated_doc
    expire_in: 1 week
  dependencies: []
  tags:
    - documentation
  only:
    - develop
    - master

#===========================================================================
# PACKAGING
#===========================================================================
packaging:linux:
  <<: *package_definition
  artifacts:
    paths:
      - build/MapGeneration-*-Linux.sh
      - build/MapGeneration-*-Linux.tar.gz
      - build/MapGeneration-*-Linux.tar.Z
    expire_in: 1 week
  tags:
    - linux

packaging:osx:
  <<: *package_definition
  artifacts:
    paths:
    - build/MapGeneration-*-Darwin.sh
    - build/MapGeneration-*-Darwin.tar.gz
    expire_in: 1 week
  tags:
    - osx

packaging:windows:
  <<: *package_definition
  artifacts:
    paths:
    - build/MapGeneration-*-win32.exe
    expire_in: 1 week
  tags:
    - windows